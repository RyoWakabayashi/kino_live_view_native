# KINOLVN

```elixir
Mix.install([{:server, path: "./"}],
  config: [
    server: [
      {ServerWeb.Endpoint,
       [
         server: true,
         url: [host: "localhost"],
         adapter: Phoenix.Endpoint.Cowboy2Adapter,
         render_errors: [
           formats: [html: ServerWeb.ErrorHTML, json: ServerWeb.ErrorJSON],
           layout: false
         ],
         pubsub_server: Server.PubSub,
         live_view: [signing_salt: "lUcf8aHg"],
         http: [ip: {127, 0, 0, 1}, port: 4000],
         secret_key_base: String.duplicate("a", 64)
       ]}
    ],
    kino: [
      group_leader: Process.group_leader()
    ],
    live_view_native: [plugins: [LiveViewNative.SwiftUI]],
    live_view_native_stylesheet: [parsers: [swiftui: LiveViewNative.SwiftUI.RulesParser]]
  ],
  force: true
)

# Application.put_env(:kino, :group_leader, Process.group_leader())
# Server.Application.start([], [])
```

## Section

<!-- livebook:{"attrs":"eyJhY3Rpb24iOiI6aW5kZXgiLCJjb2RlIjoiZGVmbW9kdWxlIFNlcnZlcldlYi5FeGFtcGxlTGl2ZSBkb1xuICB1c2UgU2VydmVyV2ViLCA6bGl2ZV92aWV3XG4gIHJlcXVpcmUgTG9nZ2VyXG5cbiAgQGltcGwgdHJ1ZVxuICBkZWYgcmVuZGVyKCV7Zm9ybWF0OiA6c3dpZnR1aX0gPSBhc3NpZ25zKSBkb1xuICAgIH5TV0lGVFVJXCJcIlwiXG4gICAgPFRleHQ+SGVsbG8gZnJvbSBMaXZlVmlldyBOYXRpdmUhPC9UZXh0PlxuICAgIFwiXCJcIlxuICBlbmRcblxuICBkZWYgcmVuZGVyKGFzc2lnbnMpIGRvXG4gICAgfkhcIlwiXCJcbiAgICA8cCBwaHgtY2xpY2s9XCJjbGlja1wiPkhlbGxvIGZyb20gTGl2ZVZpZXchPC9wPlxuICAgIFwiXCJcIlxuICBlbmRcblxuICBAaW1wbCB0cnVlXG4gIGRlZiBoYW5kbGVfZXZlbnQoXCJjbGlja1wiLCBfcGFyYW1zLCBzb2NrZXQpIGRvXG4gICAgSU8uaW5zcGVjdCg6Yy5waWQoMCwgMTQ1LCAwKSwgXCJIZWxsbzFcIiwgbGFiZWw6IFwiVG8gQ29ycmVjdCBHcm91cCBMZWFkZXJcIilcbiAgICBJTy5pbnNwZWN0KFwiSGVsbG8yXCIsIGxhYmVsOiBcIlRvIGN1cnJlbnQgZ3JvdXAgbGVhZGVyXCIpXG4gICAgTG9nZ2VyLmluZm8oXCJTZWxmOiBcIiA8PiBpbnNwZWN0KHNlbGYoKSkpXG4gICAgTG9nZ2VyLmluZm8oXCJHcm91cCBMZWFkZXI6XCIgPD4gaW5zcGVjdChQcm9jZXNzLmdyb3VwX2xlYWRlcigpKSlcbiAgICBJTy5wdXRzKFwiSEVMTE9PT09cIilcbiAgICB7Om5vcmVwbHksIHNvY2tldH1cbiAgZW5kXG5lbmQiLCJwYXRoIjoiLyJ9","chunks":[[0,85],[87,684],[773,59],[834,51]],"kind":"Elixir.Server.SmartCells.LiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require Server.Livebook
import Server.Livebook
import Kernel, except: [defmodule: 2]

defmodule ServerWeb.ExampleLive do
  use ServerWeb, :live_view
  require Logger

  @impl true
  def render(%{format: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text>Hello from LiveView Native!</Text>
    """
  end

  def render(assigns) do
    ~H"""
    <p phx-click="click">Hello from LiveView!</p>
    """
  end

  @impl true
  def handle_event("click", _params, socket) do
    IO.inspect(:c.pid(0, 145, 0), "Hello1", label: "To Correct Group Leader")
    IO.inspect("Hello2", label: "To current group leader")
    Logger.info("Self: " <> inspect(self()))
    Logger.info("Group Leader:" <> inspect(Process.group_leader()))
    IO.puts("HELLOOOO")
    {:noreply, socket}
  end
end
|> Server.SmartCells.LiveViewNative.register("/", ":index")

import Server.Livebook, only: []
import Kernel
:ok
```

```elixir
Process.group_leader()
```

```elixir

```

```elixir
Application.get_env(:kino, :group_leader) |> IO.inspect()
Process.group_leader()
```

```elixir
# Application.put_env(:phoenix, :serve_endpoints, true)
# GenServer.stop(ServerWeb.Endpoint)
```

```elixir

```

```elixir
current_group_leader = :c.pid(0, 5889, 0)
```

```elixir
Process.group_leader(current_group_leader, Process.group_leader())
```

```elixir
live_view = :c.pid(0, 6056, 0)
```

```elixir

```

```elixir
Process.info(current_group_leader)[:group_leader]
```

```elixir
Process.group_leader(live_view, Process.group_leader())
```

```elixir
Process.group_leader()
```

```elixir
Process.group_leader()
```

```elixir
Supervisor.
```

```elixir
supervisor = Process.whereis(Server.Supervisor)
Process.info(supervisor)[:group_leader]
```

```elixir
Process.info(:c.pid(0, 5890, 0))
```

```elixir
web_server = Process.whereis(ServerWeb.Endpoint) |> IO.inspect()
Process.group_leader(web_server, Process.group_leader())

# spawn(fn -> 
#   spawn(fn -> IO.inspect("HE") end)
#    IO.inspect("EH")
# end)
# # Process.group_leader(web_server, Process.group_leader)
```

```elixir
Process.group_leader()
```

```elixir
Process.info(self())[:group_leader]
```

```elixir

```

```elixir

```

```elixir

```

```elixir

```
